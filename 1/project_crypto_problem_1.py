# -*- coding: utf-8 -*-
"""project_crypto_problem#1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11NsJlZuNsKv5dSt3ImkQciai7LFGFHxU
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install tinyec

import tinyec.registry as reg 
import tinyec.ec as ec 
from sympy.ntheory.residue_ntheory import nthroot_mod 
import secrets
studentno = 401207254

"""**part1**"""

curve = reg.get_curve("secp192r1")
print(f"a = 0x{curve.a:x}")

curve = reg.get_curve("secp192r1")
print(f"a = 0x{curve.a:x}") 
print(f"a = {curve.a}") 
print(f"b = 0x{curve.b:x} ") 
print(f"b = {curve.b}") 
print(f"p = 0x{curve.field.p:x}") 
print(f"p = {curve.field.p}") 
print(curve)

"""**part2**"""

x = 401207254
f = lambda x: nthroot_mod(x ** 3 + curve.a * x + curve.b, 2, curve.field.p)
while True:
  y = f(x)
  if (y is None):
    x *= 10
    print(f"I can not any point for x = {x} ")
    continue
  break
#finally founf a point
G = ec.Point(curve, x, y)
print(f"point G = (x, y) = ({G.x}, {G.y})  was found")

"""**part3**"""

twoG = 2 * G
sG = studentno * G
print("2G = ( ",twoG.x , " , " , twoG.y ,")")
print("s.G = ( ",sG.x , " , " , sG.y ,")")

"""**part4**"""

#choosing k at random as a private key
k = secrets.randbelow(curve.field.n) 
print("(Private key) k = " , k)
# public key 
kG = k * G
public_key = kG
print("Public key (k.G) = (" ,public_key.x , " , ", public_key.y , ")")
print(f"Group order (n) is {curve.field.n}")

#Encryotion
m = sG
r2 = secrets.randbelow(curve.field.n)
encrypted_m = r2*G , r2*public_key + m
print(m.x)
print(m.y)
print(encrypted_m[0].x)
print(encrypted_m[0].y)
print(encrypted_m[1].x)
print(encrypted_m[1].y)

"""**part5**"""

#Decryption
decrypted_m =  encrypted_m[1] - k * encrypted_m[0]
print(decrypted_m.x)
print(decrypted_m.y)